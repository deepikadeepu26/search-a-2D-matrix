//O(N * M)
// bool searchMatrix(int** matrix, int matrixSize, int* matrixColSize, int target) {
//     int i,j;
//     for(i=0;i<matrixSize;i++)
//     {
//         for(j=0;j<matrixColSize[i];j++)
//         {
//             if(matrix[i][j]==target)
//             {
//                 return true;
//             }
//         }
//     }
//     return false;
// }
bool searchMatrix(int** matrix, int matrixSize, int* matrixColSize, int target) {
    if (matrixSize == 0 || matrixColSize == 0) return false; // 檢查空矩陣
    int mid = matrixSize / 2;
    printf("%d\n", mid);


    // 先找row
    int row = -1;
    int start = 0, end = matrixSize - 1;

    // 使用 while 判斷範圍
    while (start <= end) {
        int mid = start + (end - start) / 2;

        if (target >= matrix[mid][0] && target <= matrix[mid][matrixColSize[mid] - 1]) {
            row = mid;
            break; // 找到正確的 row，跳出迴圈
        }
        else if (target < matrix[mid][0]) {
            end = mid - 1; // 搜尋左側
        }
        else {
            start = mid + 1; // 搜尋右側
        }
    }

    // 如果找不到適合的 row
    if (row == -1) {
        return false;
    }
    printf("row = %d", row);

    int col = matrixColSize[row];

    for(int i = 0; i < col; i++){
        if(matrix[row][i] == target) return true;
    }
    return false;
}
